/* * File Name:  BootDefaultServiceActivity.java * Copyright:  Beijing Jaeger Communication Electronic Technology Co., Ltd. Copyright YYYY-YYYY,  All rights reserved * Descriptions:  <Descriptions> * Changed By:   * Changed Time:  2014-3-3 * Changed Content:  <Changed Content> */package com.pbi.dvb;import java.util.List;import android.os.Bundle;import android.provider.Settings.SettingNotFoundException;import android.text.InputType;import android.view.KeyEvent;import android.view.View;import android.widget.EditText;import android.widget.Switch;import android.widget.TextView;import android.widget.Toast;import com.pbi.dvb.dao.ServiceInfoDao;import com.pbi.dvb.dao.impl.ServiceInfoDaoImpl;import com.pbi.dvb.domain.ServiceInfoBean;import com.pbi.dvb.global.Config;import com.pbi.dvb.utils.CommonUtils;/** * <Functional overview> <Functional Details> *  * @author * @version [Version Number, 2014-3-3] * @see [Relevant Class/Method] * @since [Product/Module Version] */public class BootDefaultServiceActivity extends DVBBaseActivity{    private TextView tvSwitch;        private EditText etNumber;        @Override    protected void onCreate(Bundle savedInstanceState)    {        super.onCreate(savedInstanceState);        setContentView(R.layout.boot_default_channel);    }        @Override    protected void onStart()    {        super.onStart();        CommonUtils.setLeftRightFunction(Config.SWITCH_TO_LEFT_RIGHT_CONTROL);                tvSwitch = (TextView)this.findViewById(R.id.tv_bdc_switch);        etNumber = (EditText)this.findViewById(R.id.et_default_channel_number);        etNumber.setInputType(InputType.TYPE_NULL);        etNumber.setOnKeyListener(new View.OnKeyListener()        {                        @Override            public boolean onKey(View v, int keyCode, KeyEvent event)            {                if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER)                {                    etNumber.setText(null);                }                return false;            }        });                echoSettings();    }        @Override    protected void onPause()    {        super.onPause();        saveSettings();    }        @Override    public boolean onKeyDown(int keyCode, KeyEvent event)    {        switch (keyCode)        {            case KeyEvent.KEYCODE_DPAD_LEFT:            case KeyEvent.KEYCODE_DPAD_RIGHT:                if (tvSwitch.getText().toString().equalsIgnoreCase(getString(R.string.boot_default_channel_switch_on)))                {                    tvSwitch.setText(getString(R.string.boot_default_channel_switch_off));                    etNumber.setText(null);                    return false;                }                tvSwitch.setText(getString(R.string.boot_default_channel_switch_on));                break;        }        return super.onKeyDown(keyCode, event);    }        private void echoSettings()    {        int startStatus;        int serviceId;        try        {            startStatus = android.provider.Settings.System.getInt(getContentResolver(), "boot_default_channel_open");            serviceId = android.provider.Settings.System.getInt(getContentResolver(), "boot_default_channel_number");        }        catch (SettingNotFoundException e)        {            startStatus = 0;            serviceId = 0;            e.printStackTrace();        }                // the function is closed.        if (startStatus == 0)        {            tvSwitch.setText(getString(R.string.boot_default_channel_switch_off));            return;        }                tvSwitch.setText(getString(R.string.boot_default_channel_switch_on));        etNumber.setText(String.valueOf(serviceId));    }        private void saveSettings()    {        int startStatus = 0;        int serviceId = 0;        if (tvSwitch.getText().toString().equalsIgnoreCase(getString(R.string.boot_default_channel_switch_on)))        {            startStatus = 1;            try            {                serviceId = Integer.parseInt(etNumber.getText().toString());            }            catch (NumberFormatException e)            {                Toast.makeText(this, getString(R.string.bdc_format_error), 1).show();                etNumber.setText(null);                e.printStackTrace();                return;            }        }                // verify the input service id's validity.        ServiceInfoDao sDao = new ServiceInfoDaoImpl(this);        List<ServiceInfoBean> beans = sDao.getChannelIdByLogicalNumber(serviceId);        if (beans.size() == 0 && startStatus ==1)        {            Toast.makeText(this, getString(R.string.bdc_not_exist), 1).show();            etNumber.setText(null);            return;        }                android.provider.Settings.System.putInt(getContentResolver(), "boot_default_channel_open", startStatus);        android.provider.Settings.System.putInt(getContentResolver(), "boot_default_channel_number", serviceId);        if (startStatus ==1)        {            Toast.makeText(this, getString(R.string.bdc_success), 1).show();            return;        }        etNumber.setText(null);    }}